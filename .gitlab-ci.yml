
stages:
  - unittest
  - code_analysis
  - package
  - integtest
  - security_scan
  - deploy

variables:
  RS_RELEASE_VERSION: "1.0"
  RS_VERSION: $RS_RELEASE_VERSION.$CI_PIPELINE_ID

.sonar_scan:
  stage: code_analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd $TARGET_PROJECT
    - sonar-scanner -Dsonar.host.url=$SONAR_URL -Dsonar.projectName=rs-$TARGET_PROJECT -Dsonar.projectKey=rs-$TARGET_PROJECT -Dsonar.token=$SONAR_TOKEN -Dsonar.qualitygate.wait=true

sonar_scan_cart:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: cart

sonar_scan_catalogue:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: catalogue

sonar_scan_dispatch:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: dispatch

sonar_scan_mongo:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: mongo

sonar_scan_mysql:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: mysql

sonar_scan_payment:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: payment

sonar_scan_ratings:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: ratings

sonar_scan_shipping:
  extends: .sonar_scan
  image: maven:3.9.3-eclipse-temurin-17
  variables:
    TARGET_PROJECT: shipping
  script:
    - cd $TARGET_PROJECT
    - mvn package
    - mvn sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.projectName=rs-shipping -Dsonar.projectKey=rs-shipping -Dsonar.token=$SONAR_TOKEN -Dsonar.language=java -Dsonar.sources=src -Dsonar.qualitygate.wait=true

sonar_scan_user:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: user

sonar_scan_web:
  extends: .sonar_scan
  variables:
    TARGET_PROJECT: web

.build_image:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/${IMAGE_BUILD_CONTEXT}"
      --cache=true
      --cache-ttl=168h
      --destination "${CI_REGISTRY_IMAGE}/rs-${IMAGE_BUILD_CONTEXT}:${RS_VERSION}"

build_cart_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: cart
  needs:
    - sonar_scan_cart

build_catalogue_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: catalogue
  needs:
    - sonar_scan_catalogue

build_dispatch_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: dispatch
  needs:
    - sonar_scan_dispatch

build_loadgen_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: load-gen

build_mongo_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: mongo
  needs:
    - sonar_scan_mongo

build_mysql_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: mysql
  needs:
    - sonar_scan_mysql

build_payment_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: payment
  needs:
    - sonar_scan_payment

build_ratings_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: ratings
  needs:
    - sonar_scan_ratings

build_shipping_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: shipping
  needs:
    - sonar_scan_shipping

build_user_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: user
  needs:
    - sonar_scan_user

build_web_image:
  extends: .build_image
  variables:
    IMAGE_BUILD_CONTEXT: web
  needs:
    - sonar_scan_web

.trivy_image_scan:
  stage: security_scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/rs-${IMAGE_NAME}:${RS_VERSION}"
  script:
    - trivy image --db-repository $CI_REGISTRY_IMAGE/trivy-db --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
    when: 'always'
  allow_failure: true

trivy_scan_cart_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: cart
  needs:
    - build_cart_image

trivy_scan_catalogue_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: catalogue
  needs:
    - build_catalogue_image

trivy_scan_dispatch_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: dispatch
  needs:
    - build_dispatch_image

trivy_scan_loadgen_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: load-gen
  needs:
    - build_loadgen_image

trivy_scan_mongo_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: mongo
  needs:
    - build_mongo_image

trivy_scan_mysql_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: mysql
  needs:
    - build_mysql_image

trivy_scan_payment_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: payment
  needs:
    - build_payment_image

trivy_scan_ratings_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: ratings
  needs:
    - build_ratings_image

trivy_scan_shipping_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: shipping
  needs:
    - build_shipping_image

trivy_scan_user_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: user
  needs:
    - build_user_image

trivy_scan_web_image:
  extends: .trivy_image_scan 
  variables:
    IMAGE_NAME: web
  needs:
    - build_web_image

build_helm_chart:
  stage: package
  image:
    name: alpine/k8s:1.31.2
  needs:
    - build_cart_image
    - build_catalogue_image
    - build_dispatch_image
    - build_loadgen_image
    - build_mongo_image
    - build_mysql_image
    - build_payment_image
    - build_ratings_image
    - build_shipping_image
    - build_user_image
    - build_web_image
  script:
    - cd $CI_PROJECT_DIR/K8s/helm
    - | 
        escaped_version=$(printf '%s\n' "${RS_VERSION}" | sed -e 's/[\/.]/\\./g')
        sed -i "s/version\: 0\.0-0/version\: $escaped_version/" values.yaml
        escaped_registry=$(printf '%s\n' "${CI_REGISTRY}\/demo\/$CI_PROJECT_NAME" | sed -e 's/[.]/\\./g')
        sed -i "s/repo\: repo/repo\: $escaped_registry/" values.yaml
    - helm package . --app-version ${RS_VERSION} --version ${RS_VERSION}
    - helm repo add --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_PROJECT_NAME} ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/devel
    - helm cm-push robot-shop-$RS_VERSION.tgz $CI_PROJECT_NAME

trivy_scan_helm_chart:
  stage: security_scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  needs:
    - build_helm_chart
  script:
    - trivy config --quiet --exit-code 0 K8s/helm
    - trivy config --quiet --exit-code 1 --severity CRITICAL K8s/helm

deploy_app:
  stage: deploy
  image:
    name: alpine/k8s:1.31.2
    entrypoint: ['']
  needs:
    - trivy_scan_cart_image
    - trivy_scan_catalogue_image
    - trivy_scan_dispatch_image
    - trivy_scan_mongo_image
    - trivy_scan_mysql_image
    - trivy_scan_payment_image
    - trivy_scan_ratings_image
    - trivy_scan_shipping_image
    - trivy_scan_user_image
    - trivy_scan_web_image
    - trivy_scan_helm_chart
  script:
    - kubectl config use-context $CI_PROJECT_PATH:default
    - kubectl create namespace robot-shop --dry-run=client -o yaml | kubectl apply -f -
    - kubectl create secret docker-registry regcred --docker-server=$CI_REGISTRY --docker-username=gitlab-ci-token --docker-password=$CI_JOB_TOKEN -n robot-shop --dry-run=client -o yaml | kubectl apply -f -
    - helm repo add --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_PROJECT_NAME} ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/devel
    - helm upgrade --install robot-shop $CI_PROJECT_NAME/robot-shop -n robot-shop --wait --wait-for-jobs --timeout 10m --version $RS_VERSION
